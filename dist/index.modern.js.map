{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { useReducer, useCallback, Dispatch } from \"react\";\n\nconst URLformat = ({ query }: { query: { [k: string]: string } }) => {\n  return `?${Object.keys(query).map((key) => `${key}=${query[key]}`)}`;\n};\n\nconst mergeRequestOptions = (\n  defaultOptions: RequestInit,\n  customOptions: RequestInit = {}\n): RequestInit => {\n  const defaultKeys = Object.keys(defaultOptions);\n  const customKeys = Object.keys(customOptions);\n  const sharedKeys = defaultKeys.concat(\n    customKeys.filter((k) => !defaultKeys.includes(k))\n  );\n  return sharedKeys.reduce((acc: RequestInit, key: keyof RequestInit) => {\n    const defaultValue = defaultOptions[key];\n    const customValue = customOptions[key];\n\n    if (typeof defaultValue === \"object\" && typeof customValue === \"object\") {\n      return {\n        ...acc,\n        [key]: {\n          ...defaultValue,\n          ...customValue,\n        },\n      };\n    }\n\n    return {\n      ...acc,\n      [key]: customValue || defaultValue,\n    };\n  }, {});\n};\n\nconst setDefaultOptions = (): RequestInit => ({\n  method: \"GET\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  mode: \"cors\",\n  cache: \"no-cache\",\n});\n\nconst request = (url: string, options?: RequestInit): Promise<Response> => {\n  const defaultOptions = setDefaultOptions();\n  const opts = mergeRequestOptions(defaultOptions, options);\n  return fetch(url, opts);\n};\n\n/**\n * QueryProps defines the properties required (or optionally used) to define\n *  a useQuery hook.\n *\n * QueryProps uses generics (received from a useQuery hook) to determine the following...\n *  1. what data is accessible in the useQuery hook\n *  2. what query params exist for the useQuery hook\n */\ntype QueryProps<Params> = {\n  /** All queries require a target endpoint */\n  endpoint: string;\n  /** All queries have optional params (defaults to `undefined`) */\n  params?: Params;\n  /**\n   * useQuery defaults to using the global `fetch` browser API\n   *  - you can provide your own external request util here as needed\n   */\n  requestUtil?: (\n    url: string,\n    options?: RequestInit | undefined\n  ) => Promise<Response>;\n  /**\n   * useQuery can optionally serve cached data, rather than what's provided by an\n   *  external `fetch`\n   *  - localStorage is used for the cache\n   *  - data provided by this hook will be cached using the given key passed by `withCache`\n   *  - the data that is cached will be replaced by any use of useQuery's `requestUtil`\n   * */\n  withCache?: string;\n  // TODO: add a flag here to 'cancel' requests (prevent data from updating if parent is unmounted)\n};\n/**\n * QueryState defines the stateful properties that are returned from every instance\n *  of a useQuery hook\n */\ntype QueryState<Data, Params> = {\n  /** If an external request is currently active, isLoading will be set to `true` */\n  isLoading: boolean;\n  /** The params used in the current or most recent instance of a useQuery hook */\n  params: Params | {};\n  /** The resulting URL used in the current or most recent instance of a useQuery hook */\n  url: string;\n  /** This will always match the endpoint defined in QueryProps */\n  endpoint?: string;\n  /** The data expected to be retrieved by a useQuery hook */\n  data?: Data;\n  /** Any error thrown by a useQuery hook will be communicated here */\n  error?: string;\n  /** If an error status code is returned from an external request, it will be populated here */\n  errorCode?: number;\n};\n/**\n * QueryFetch is exported here for typing use outside of this module\n *\n * ex:\n *  type FetchSomeType = QueryFetch<{ data: SomeType }, {}>;\n */\nexport type QueryFetch<Data, Params> = (config?: {\n  params?: Params;\n  options?: RequestInit;\n  /**\n   * `onResponse` can be used to mutate the data returned from your external source\n   *  - This function defaults to a noop wrapped in a Promise that immediately resolves\n   *  - if you supply your own handler here, it must be wrapped in a promise\n   */\n  onResponse?: (\n    data: any\n  ) => Promise<{\n    data: Data;\n  }>;\n}) => void;\n/**\n * QueryResult defines the properties that are returned from every instance\n *  of a useQuery hook.\n *\n * QueryResult extends QueryState\n *\n * QueryResult uses generics (received from a useQuery hook) to determine the following...\n *  1. what data is accessible in the useQuery hook\n *  2. what query params exist for the useQuery hook\n */\ntype QueryResult<Data, Params> = QueryState<Data, Params> & {\n  /**\n   * `fetch` can be used for controlled external data retrieval from whatever context\n   *  defines a useQuery hook\n   */\n  fetch: QueryFetch<Data, Params>;\n  /**\n   * this is generally useful for testing, you can also use it to wipe the state of the hook\n   */\n  dispatch: Dispatch<QueryActions<Data, Params>>;\n};\nexport enum ACTION {\n  RESET = \"reset\",\n  REFRESH = \"refresh\",\n  SUCCESS = \"success\",\n  ERROR = \"error\",\n}\ntype RESET_ACTION = { type: ACTION.RESET };\ntype REFRESH_ACTION<P> = {\n  type: ACTION.REFRESH;\n  url: string;\n  params?: P | {};\n};\ntype SUCCESS_ACTION<D> = {\n  type: ACTION.SUCCESS;\n  data: D;\n  prevPage?: string;\n  nextPage?: string;\n};\ntype ERROR_ACTION = { type: ACTION.ERROR; error: string; errorCode?: number };\ntype QueryActions<D, P> =\n  | RESET_ACTION\n  | REFRESH_ACTION<P>\n  | SUCCESS_ACTION<D>\n  | ERROR_ACTION;\nexport function useQueryReducer<Data, Params>(\n  state: QueryState<Data, Params>,\n  action: QueryActions<Data, Params>\n): QueryState<Data, Params> {\n  switch (action.type) {\n    case ACTION.RESET: {\n      return {\n        isLoading: false,\n        url: state.url,\n        params: state.params,\n      };\n    }\n    case ACTION.REFRESH: {\n      const { url: actionUrl, params = {} } = action;\n      return {\n        ...state,\n        url: actionUrl,\n        params,\n        isLoading: true,\n      };\n    }\n    case ACTION.SUCCESS: {\n      const { data } = action;\n      return {\n        ...state,\n        data,\n        isLoading: false,\n      };\n    }\n    case ACTION.ERROR: {\n      const { error, errorCode } = action;\n      return {\n        ...state,\n        error,\n        errorCode,\n        isLoading: false,\n      };\n    }\n    default:\n      return state;\n  }\n}\n/**\n * useQuery is a custom hook that enforces consistent patterns for...\n *  1. retrieving data from external resources\n *  2. typing the values returned from external resources\n *  3. typing the optional query parameters available on an external resource\n */\nexport function useQuery<D, P>({\n  endpoint,\n  withCache,\n  params,\n  requestUtil = request,\n}: QueryProps<P>): QueryResult<D, P> {\n  const reducer = useQueryReducer as (\n    prev: QueryState<D, P>,\n    action: QueryActions<D, P>\n  ) => QueryState<D, P>;\n  const [state, dispatch] = useReducer(reducer, {\n    isLoading: false,\n    params: params || {},\n    url: endpoint + URLformat({ query: { ...(params || {}) } }),\n  });\n\n  const {\n    url: urlState,\n    params: paramsState,\n    isLoading,\n    data,\n    error,\n    errorCode,\n  } = state;\n\n  const fetch = useCallback(\n    async (\n      config: {\n        params?: P;\n        options?: RequestInit;\n        forcedEndpoint?: string;\n        onResponse?: (data: any) => Promise<{ data: D }>;\n      } = {}\n    ) => {\n      const queryParams = {\n        ...params,\n        ...config?.params,\n      };\n      const requestUrl =\n        (config?.forcedEndpoint || endpoint) +\n        URLformat({\n          // @ts-ignore\n          query: { ...queryParams },\n        });\n      const defaultErrorMessage =\n        \"Sorry, we are unable to retrieve this data for you right now. Please try again later.\";\n\n      function mountData(d: D): void {\n        if (withCache) {\n          window.localStorage.setItem(withCache, JSON.stringify(d));\n        }\n\n        dispatch({\n          type: ACTION.SUCCESS,\n          data: d,\n        });\n      }\n\n      try {\n        dispatch({\n          type: ACTION.REFRESH,\n          url: requestUrl,\n          params,\n        });\n        const response = await requestUtil(requestUrl, config?.options);\n\n        if (!response.ok) {\n          const { error } = await response.json();\n          dispatch({\n            type: ACTION.ERROR,\n            error: error || defaultErrorMessage,\n            errorCode: response.status,\n          });\n          return;\n        }\n\n        const payload = await response.json().catch(async () => {\n          // response.ok but no body\n          if (config?.onResponse) {\n            const { data: responseData } = await config.onResponse(payload);\n            mountData(responseData || ({} as D));\n            return;\n          }\n        });\n\n        if (config?.onResponse) {\n          const { data: responseData } = await config.onResponse(payload);\n          mountData(responseData);\n          return;\n        }\n\n        mountData(payload);\n      } catch (e) {\n        const { message = defaultErrorMessage } = e as { message: string };\n        dispatch({\n          type: ACTION.ERROR,\n          error: message,\n          errorCode: 500,\n        });\n      }\n    },\n    [params, endpoint, withCache, requestUtil]\n  );\n\n  let cachedData;\n  if (withCache) {\n    const cache = window.localStorage.getItem(withCache);\n    if (cache) cachedData = JSON.parse(cache);\n  }\n\n  return {\n    isLoading,\n    endpoint,\n    params: paramsState,\n    url: urlState,\n    fetch,\n    data: cachedData || data,\n    error,\n    errorCode,\n    dispatch,\n  };\n}\n"],"names":["URLformat","query","Object","keys","map","key","mergeRequestOptions","defaultOptions","customOptions","defaultKeys","customKeys","sharedKeys","concat","filter","k","includes","reduce","acc","defaultValue","customValue","setDefaultOptions","method","headers","mode","cache","request","url","options","opts","fetch","ACTION","useQueryReducer","state","action","type","RESET","isLoading","params","REFRESH","actionUrl","SUCCESS","data","ERROR","error","errorCode","useQuery","endpoint","withCache","requestUtil","reducer","dispatch","useReducer","urlState","paramsState","useCallback","config","queryParams","requestUrl","forcedEndpoint","defaultErrorMessage","mountData","d","window","localStorage","setItem","JSON","stringify","response","ok","json","status","payload","catch","onResponse","responseData","e","message","cachedData","getItem","parse"],"mappings":";;AAEA,MAAMA,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD;AAChB,aAAWC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,GAAnB,CAAwBC,GAAD,OAAYA,OAAOJ,KAAK,CAACI,GAAD,GAA/C,GAAX;AACD,CAFD;;AAIA,MAAMC,mBAAmB,GAAG,CAC1BC,cAD0B,EAE1BC,gBAA6B,EAFH;AAI1B,QAAMC,WAAW,GAAGP,MAAM,CAACC,IAAP,CAAYI,cAAZ,CAApB;AACA,QAAMG,UAAU,GAAGR,MAAM,CAACC,IAAP,CAAYK,aAAZ,CAAnB;AACA,QAAMG,UAAU,GAAGF,WAAW,CAACG,MAAZ,CACjBF,UAAU,CAACG,MAAX,CAAmBC,CAAD,IAAO,CAACL,WAAW,CAACM,QAAZ,CAAqBD,CAArB,CAA1B,CADiB,CAAnB;AAGA,SAAOH,UAAU,CAACK,MAAX,CAAkB,CAACC,GAAD,EAAmBZ,GAAnB;AACvB,UAAMa,YAAY,GAAGX,cAAc,CAACF,GAAD,CAAnC;AACA,UAAMc,WAAW,GAAGX,aAAa,CAACH,GAAD,CAAjC;;AAEA,QAAI,OAAOa,YAAP,KAAwB,QAAxB,IAAoC,OAAOC,WAAP,KAAuB,QAA/D,EAAyE;AACvE,aAAO,EACL,GAAGF,GADE;AAEL,SAACZ,GAAD,GAAO,EACL,GAAGa,YADE;AAEL,aAAGC;AAFE;AAFF,OAAP;AAOD;;AAED,WAAO,EACL,GAAGF,GADE;AAEL,OAACZ,GAAD,GAAOc,WAAW,IAAID;AAFjB,KAAP;AAID,GAlBM,EAkBJ,EAlBI,CAAP;AAmBD,CA5BD;;AA8BA,MAAME,iBAAiB,GAAG,OAAoB;AAC5CC,EAAAA,MAAM,EAAE,KADoC;AAE5CC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFmC;AAK5CC,EAAAA,IAAI,EAAE,MALsC;AAM5CC,EAAAA,KAAK,EAAE;AANqC,CAApB,CAA1B;;AASA,MAAMC,OAAO,GAAG,CAACC,GAAD,EAAcC,OAAd;AACd,QAAMpB,cAAc,GAAGa,iBAAiB,EAAxC;AACA,QAAMQ,IAAI,GAAGtB,mBAAmB,CAACC,cAAD,EAAiBoB,OAAjB,CAAhC;AACA,SAAOE,KAAK,CAACH,GAAD,EAAME,IAAN,CAAZ;AACD,CAJD;;IAkGYE;;AAAZ,WAAYA;AACVA,EAAAA,eAAA,UAAA;AACAA,EAAAA,iBAAA,YAAA;AACAA,EAAAA,iBAAA,YAAA;AACAA,EAAAA,eAAA,UAAA;AACD,CALD,EAAYA,MAAM,KAANA,MAAM,KAAA,CAAlB;;SAwBgBC,gBACdC,OACAC;AAEA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,MAAM,CAACK,KAAZ;AAAmB;AACjB,eAAO;AACLC,UAAAA,SAAS,EAAE,KADN;AAELV,UAAAA,GAAG,EAAEM,KAAK,CAACN,GAFN;AAGLW,UAAAA,MAAM,EAAEL,KAAK,CAACK;AAHT,SAAP;AAKD;;AACD,SAAKP,MAAM,CAACQ,OAAZ;AAAqB;AACnB,cAAM;AAAEZ,UAAAA,GAAG,EAAEa,SAAP;AAAkBF,UAAAA,MAAM,GAAG;AAA3B,YAAkCJ,MAAxC;AACA,eAAO,EACL,GAAGD,KADE;AAELN,UAAAA,GAAG,EAAEa,SAFA;AAGLF,UAAAA,MAHK;AAILD,UAAAA,SAAS,EAAE;AAJN,SAAP;AAMD;;AACD,SAAKN,MAAM,CAACU,OAAZ;AAAqB;AACnB,cAAM;AAAEC,UAAAA;AAAF,YAAWR,MAAjB;AACA,eAAO,EACL,GAAGD,KADE;AAELS,UAAAA,IAFK;AAGLL,UAAAA,SAAS,EAAE;AAHN,SAAP;AAKD;;AACD,SAAKN,MAAM,CAACY,KAAZ;AAAmB;AACjB,cAAM;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT,YAAuBX,MAA7B;AACA,eAAO,EACL,GAAGD,KADE;AAELW,UAAAA,KAFK;AAGLC,UAAAA,SAHK;AAILR,UAAAA,SAAS,EAAE;AAJN,SAAP;AAMD;;AACD;AACE,aAAOJ,KAAP;AAnCJ;AAqCD;SAOea,SAAe;AAC7BC,EAAAA,QAD6B;AAE7BC,EAAAA,SAF6B;AAG7BV,EAAAA,MAH6B;AAI7BW,EAAAA,WAAW,GAAGvB;AAJe;AAM7B,QAAMwB,OAAO,GAAGlB,eAAhB;AAIA,QAAM,CAACC,KAAD,EAAQkB,QAAR,IAAoBC,UAAU,CAACF,OAAD,EAAU;AAC5Cb,IAAAA,SAAS,EAAE,KADiC;AAE5CC,IAAAA,MAAM,EAAEA,MAAM,IAAI,EAF0B;AAG5CX,IAAAA,GAAG,EAAEoB,QAAQ,GAAG9C,SAAS,CAAC;AAAEC,MAAAA,KAAK,EAAE,EAAE,IAAIoC,MAAM,IAAI,EAAd;AAAF;AAAT,KAAD;AAHmB,GAAV,CAApC;AAMA,QAAM;AACJX,IAAAA,GAAG,EAAE0B,QADD;AAEJf,IAAAA,MAAM,EAAEgB,WAFJ;AAGJjB,IAAAA,SAHI;AAIJK,IAAAA,IAJI;AAKJE,IAAAA,KALI;AAMJC,IAAAA;AANI,MAOFZ,KAPJ;AASA,QAAMH,KAAK,GAAGyB,WAAW,CACvB,OACEC,SAKI,EANN;AAQE,UAAMC,WAAW,GAAG,EAClB,GAAGnB,MADe;AAElB,UAAGkB,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAElB,MAAX;AAFkB,KAApB;AAIA,UAAMoB,UAAU,GACd,CAAC,CAAAF,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,cAAR,KAA0BZ,QAA3B,IACA9C,SAAS,CAAC;AAERC,MAAAA,KAAK,EAAE,EAAE,GAAGuD;AAAL;AAFC,KAAD,CAFX;AAMA,UAAMG,mBAAmB,GACvB,uFADF;;AAGA,aAASC,SAAT,CAAmBC,CAAnB;AACE,UAAId,SAAJ,EAAe;AACbe,QAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BjB,SAA5B,EAAuCkB,IAAI,CAACC,SAAL,CAAeL,CAAf,CAAvC;AACD;;AAEDX,MAAAA,QAAQ,CAAC;AACPhB,QAAAA,IAAI,EAAEJ,MAAM,CAACU,OADN;AAEPC,QAAAA,IAAI,EAAEoB;AAFC,OAAD,CAAR;AAID;;AAED,QAAI;AACFX,MAAAA,QAAQ,CAAC;AACPhB,QAAAA,IAAI,EAAEJ,MAAM,CAACQ,OADN;AAEPZ,QAAAA,GAAG,EAAE+B,UAFE;AAGPpB,QAAAA;AAHO,OAAD,CAAR;AAKA,YAAM8B,QAAQ,GAAG,MAAMnB,WAAW,CAACS,UAAD,EAAaF,MAAb,aAAaA,MAAb,uBAAaA,MAAM,CAAE5B,OAArB,CAAlC;;AAEA,UAAI,CAACwC,QAAQ,CAACC,EAAd,EAAkB;AAChB,cAAM;AAAEzB,UAAAA;AAAF,YAAY,MAAMwB,QAAQ,CAACE,IAAT,EAAxB;AACAnB,QAAAA,QAAQ,CAAC;AACPhB,UAAAA,IAAI,EAAEJ,MAAM,CAACY,KADN;AAEPC,UAAAA,KAAK,EAAEA,KAAK,IAAIgB,mBAFT;AAGPf,UAAAA,SAAS,EAAEuB,QAAQ,CAACG;AAHb,SAAD,CAAR;AAKA;AACD;;AAED,YAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACE,IAAT,GAAgBG,KAAhB,CAAsB;AAE1C,YAAIjB,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEkB,UAAZ,EAAwB;AACtB,gBAAM;AAAEhC,YAAAA,IAAI,EAAEiC;AAAR,cAAyB,MAAMnB,MAAM,CAACkB,UAAP,CAAkBF,OAAlB,CAArC;AACAX,UAAAA,SAAS,CAACc,YAAY,IAAK,EAAlB,CAAT;AACA;AACD;AACF,OAPqB,CAAtB;;AASA,UAAInB,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEkB,UAAZ,EAAwB;AACtB,cAAM;AAAEhC,UAAAA,IAAI,EAAEiC;AAAR,YAAyB,MAAMnB,MAAM,CAACkB,UAAP,CAAkBF,OAAlB,CAArC;AACAX,QAAAA,SAAS,CAACc,YAAD,CAAT;AACA;AACD;;AAEDd,MAAAA,SAAS,CAACW,OAAD,CAAT;AACD,KAlCD,CAkCE,OAAOI,CAAP,EAAU;AACV,YAAM;AAAEC,QAAAA,OAAO,GAAGjB;AAAZ,UAAoCgB,CAA1C;AACAzB,MAAAA,QAAQ,CAAC;AACPhB,QAAAA,IAAI,EAAEJ,MAAM,CAACY,KADN;AAEPC,QAAAA,KAAK,EAAEiC,OAFA;AAGPhC,QAAAA,SAAS,EAAE;AAHJ,OAAD,CAAR;AAKD;AACF,GA3EsB,EA4EvB,CAACP,MAAD,EAASS,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,CA5EuB,CAAzB;AA+EA,MAAI6B,UAAJ;;AACA,MAAI9B,SAAJ,EAAe;AACb,UAAMvB,KAAK,GAAGsC,MAAM,CAACC,YAAP,CAAoBe,OAApB,CAA4B/B,SAA5B,CAAd;AACA,QAAIvB,KAAJ,EAAWqD,UAAU,GAAGZ,IAAI,CAACc,KAAL,CAAWvD,KAAX,CAAb;AACZ;;AAED,SAAO;AACLY,IAAAA,SADK;AAELU,IAAAA,QAFK;AAGLT,IAAAA,MAAM,EAAEgB,WAHH;AAIL3B,IAAAA,GAAG,EAAE0B,QAJA;AAKLvB,IAAAA,KALK;AAMLY,IAAAA,IAAI,EAAEoC,UAAU,IAAIpC,IANf;AAOLE,IAAAA,KAPK;AAQLC,IAAAA,SARK;AASLM,IAAAA;AATK,GAAP;AAWD;;;;"}